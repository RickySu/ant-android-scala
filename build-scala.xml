<?xml version="1.0" encoding="UTF-8"?>
<project name="build-scala">
    <property name="proguard.dir" value="${sdk.dir}/tools/proguard" />
    <property name="template.cfg" value="${ant.android.scala.dir}/proguard-template.cfg" />
    <property name="jar.libs.dir" value="libs" />
    <property name="jar.libs.absolute.dir" location="${jar.libs.dir}" />
    <path id="jar.libs.ref" >
         <fileset dir="${jar.libs.absolute.dir}" includes="*.jar" />
         <path refid="project.libraries.jars" />
    </path>
    <!-- This file is imported by the main Ant script. -->

    <!-- Add Proguard tasks (proguard.sourceforge.net) -->
    <property name="proguard.jar" location="${proguard.dir}/lib/proguard.jar" />
    <taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="${proguard.jar}" />

    <!-- Add Scala tasks (www.scala-lang.org) -->
    <property name="scala-compiler.jar" value="${scala.dir}/lib/scala-compiler.jar" />
    <property name="scala-library.jar" value="${scala.dir}/lib/scala-library.jar" />
    <path id="scala.path">
        <pathelement path="${scala-compiler.jar}" />
        <pathelement path="${scala-library.jar}" />
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scala.path" />
    <property prefix="scala" resource="compiler.properties" classpathref="scala.path" />
    <property
        name="scalac.banner"
        value="Scala compiler version ${scala.version.number} - http://scala-lang.org" />
    <property name="scala.compilerargs" value="" />

    <!-- Rules -->

    <resourcecount property="scala.files.count">
        <fileset dir="${source.dir}" includes="**/*.scala" />
    </resourcecount>
    <condition property="contains.scala.sources">
        <not><equals arg1="${scala.files.count}" arg2="0" /></not>
    </condition>

    <target name="-compile-scala" depends="-compile" if="contains.scala.sources"
        description="Compiles project's .scala files into .class files">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <condition property="logging" value="verbose" else="none">
                <istrue value="${verbose}" />
            </condition>
            <echo message="${scalac.banner}" level="info" taskname="scalac" />
            <scalac
                destdir="${out.classes.absolute.dir}"
                bootclasspathref="android.target.classpath"
                logging="${logging}" addparams="${scala.compilerargs}"
                classpath="${extensible.classpath}"
                classpathref="jar.libs.ref">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <classpath>
                    <pathelement location="${scala-library.jar}" />
                    <!-- include compiled resources -->
                    <pathelement location="${out.classes.absolute.dir}" />
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                </classpath>
            </scalac>
            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo>Updating library output jar file...</echo>
                    <jar destfile="${out.library.jar.file}" update="true">
                        <fileset dir="${out.classes.absolute.dir}" excludes="**/R.class **/R$*.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.scala" />
                    </jar>
                </then>
            </if>

            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>
                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes">
                        </instr>
                        <!-- TODO: exclusion filters on R*.class and allowing custom exclusion from
                             user defined file -->
                    </emma>
                </then>
            </if>
        </do-only-if-manifest-hasCode>
    </target>

    <target name="-post-compile-scala" depends="-compile-scala"
            description="Shrink project class files and Scala library into one .jar file">
        <condition property="debug.mode" value="" else="#DEBUG#">
            <equals arg1="${build.target}" arg2="debug" />
        </condition>
        <condition property="release.mode" value="" else="#RELEASE#">
            <equals arg1="${build.target}" arg2="release" />
        </condition>
        <condition property="template.cfg" value="${basedir}/proguard-template.cfg">
            <available file="${basedir}/proguard-template.cfg" />
        </condition>
        <fail message="Template file '${template.cfg}' not found">
            <condition><not><available file="${template.cfg}" /></not></condition>
        </fail>
        <property name="proguard.cfg" value="${out.absolute.dir}${file.separator}proguard.cfg" />
        <delete file="${proguard.cfg}" />
        <echo message="Generating configuration file ${proguard.cfg}" />
        <generate-header property="header" />
        <if condition="${build.mode.release}"><then>
            <!-- needed for obfuscate task -->
            <path id="project.libraries.jars">
                <pathelement location="${scala-library.jar}" />
            </path>
            <!-- we use properties defined in tools/ant/build.xml -->
            <property name="injars" value="" />
            <property name="outjars" value="" />
            <property name="libraryjars" value="" />
        </then><else>
            <property name="shrinked.jar" location="${out.absolute.dir}/shrinked.jar" />
            <!-- Secondary dx input (jar files) is empty since all the jar
                 files will be in the shrinked jar (see tools/ant/build.xml) -->
            <path id="out.dex.jar.input.ref" />
            <condition property="shrink.required"><not>
                <uptodate targetfile="${shrinked.jar}">
                    <srcfiles dir="${source.absolute.dir}" includes="**/*.scala" />
                </uptodate>
            </not></condition>
            <!-- input for dex will be proguard's output -->
            <property name="out.dex.input.absolute.dir" value="${shrinked.jar}" />        
            <!-- set the compiled project files and Scala library into a single property. -->
            <if condition="${uses.ramdisk}"><then>
                <pathconvert property="project.injars">
                    <path location="${out.classes.absolute.dir}" />
                    <path refid="project.libraries.jars" />
                </pathconvert>
            </then><else>
                <pathconvert property="project.injars">
                    <path location="${out.classes.absolute.dir}" />
                    <fileset dir="${jar.libs.dir}" includes="*.jar" />
                    <path refid="project.libraries.jars" />
                    <path location="${scala-library.jar}(!META-INF/MANIFEST.MF,!library.properties)" />
                </pathconvert>
            </else></if>
            <split-path property="injars" prefix="-injars" path="${project.injars}" />
            <split-path property="outjars" prefix="-outjars" path="${shrinked.jar}" />
            <!-- set the android classpath object into a single property. -->
            <if condition="${uses.ramdisk}"><then>
                <pathconvert property="project.libraryjars">
                    <path location="${scala-library.jar}(!META-INF/MANIFEST.MF,!library.properties)" />
                    <path refid="android.target.classpath" />
                </pathconvert>
            </then><else>
                <pathconvert property="project.libraryjars">
                    <path refid="android.target.classpath" />
                </pathconvert>
            </else></if>
            <split-path property="libraryjars" prefix="-libraryjars" path="${project.libraryjars}" />
        </else></if>
        <!-- Name of the application package extracted from manifest file -->
        <xpath input="AndroidManifest.xml" expression="/manifest/@package"
               output="manifest.package" />
        <!-- we include local configuration if present -->
        <if>
            <condition>
                <available file="${basedir}/proguard-project.txt" />
            </condition>
            <then>
                <loadfile
                    property="includes" srcfile="${basedir}/proguard-project.txt"
                    failonerror="false" quiet="true" />
            </then>
            <else>
                <property name="includes" value="" />
            </else>
        </if>
        <copy file="${template.cfg}" tofile="${proguard.cfg}">
            <filterchain>
                <replacetokens>
                    <token key="HEADER" value="${header}" />
                    <token key="INJARS" value="${injars}" />
                    <token key="OUTJARS" value="${outjars}" />
                    <token key="LIBRARYJARS" value="${libraryjars}" />
                    <token key="PACKAGENAME" value="${manifest.package}" />
                    <token key="DEBUG" value="${debug.mode}" />
                    <token key="RELEASE" value="${release.mode}" />
                    <token key="INCLUDES" value="${includes}" />
                </replacetokens>
            </filterchain>
        </copy>
        <if condition="${shrink.required}"><then>
            <proguard configuration="${proguard.cfg}" />
        </then></if>
    </target>

    <!-- Macros -->

    <macrodef name="generate-header">
        <attribute name="property" />
        <sequential>
            <dirname property="parentdir" file="${basedir}" />
            <pathconvert property="rel.template.cfg">
                <map from="${parentdir}${file.separator}" to="" />
                <path location="${template.cfg}" />
            </pathconvert>
            <property name="@{property}" value="# This file is automatically generated from ${rel.template.cfg}" />
        </sequential>
    </macrodef>

    <!-- split 'path' into several lines starting with 'prefix' and save result in 'property' -->
    <macrodef name="split-path">
        <attribute name="property" />
        <attribute name="prefix" />
        <attribute name="path" />
        <sequential>
            <tempfile property="temp.file" destdir="${out.dir}" deleteonexit="true" />
            <echo message="@{path}" file="${temp.file}" />
            <loadfile srcfile="${temp.file}" property="@{property}.list">
                <filterchain>
                    <replacestring from="${path.separator}" to="${line.separator}"/>
                    <replaceregex pattern="(.*)" replace="@{prefix} \1" />
                </filterchain>
            </loadfile>
            <property name="@{property}" value="${@{property}.list}" />
        </sequential>
    </macrodef>
</project>
